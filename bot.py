import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import TOKEN, ADMIN_ID
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

RENDER_DOMAIN = "telegram-bot-jfww.onrender.com"
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"https://{RENDER_DOMAIN}{WEBHOOK_PATH}"


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_cart = {}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–Ω–∏–∑—É
main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã")]
], resize_keyboard=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class Order(StatesGroup):
    name = State()
    phone = State()
    address = State()
    payment = State()

# –£—Ç–∏–ª–∏—Ç–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –∞–¥–º–∏–Ω—É
async def send_log_to_admin(text: str):
    try:
        await bot.send_message(ADMIN_ID, f"üìã <b>–õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n{text}")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è]: {e}")

# –£—Ç–∏–ª–∏—Ç–∞: –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
@dp.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
async def cancel_order(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=main_menu)
    await show_cart_command(message)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == "/start")
async def start(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üì¶ –ö–∞—Ç–∞–ª–æ–≥",
            web_app=WebAppInfo(url="https://telegram-webapp-sand.vercel.app/")
        )],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)

# –ö–æ–º–∞–Ω–¥–∞ /contacts
@dp.message(F.text == "/contacts")
async def show_contacts(message: Message):
    text = (
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:</b>\n\n"
        "üë§ –ò—Ä–∏–Ω–∞\n"
        "Telegram: @manager_irina\n\n"
        "üë§ –ê—Ä—Ç—ë–º\n"
        "Telegram: @manager_artem"
    )
    await message.answer(text)
    await send_log_to_admin(f"üë§ {message.from_user.full_name} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /catalog
@dp.message(F.text == "/catalog")
async def show_catalog(message: Message):
    try:
        with open("catalog.json", "r", encoding="utf-8") as f:
            catalog = json.load(f)
    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥.")
        print(f"[–û—à–∏–±–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞]: {e}")
        return

    for product in catalog:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{product['id']}")],
            [InlineKeyboardButton(text="üì• –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="quick_order")],
            [InlineKeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", callback_data=f"remove_{product['id']}")]
        ])
        caption = f"<b>{product['name']}</b>\n\n{product['description']}\n\nüíµ –¶–µ–Ω–∞: {product['price']} —Ä—É–±."
        try:
            await message.answer_photo(photo=product['photo_url'], caption=caption, reply_markup=kb)
        except Exception as e:
            await message.answer(f"{caption}", reply_markup=kb)
            print(f"[–û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ]: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /cart
@dp.message(F.text == "/cart")
async def show_cart_command(message: Message):
    user_id = message.from_user.id
    cart = user_cart.get(user_id, [])

    if not cart:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu)
        return

    try:
        with open("catalog.json", "r", encoding="utf-8") as f:
            catalog = json.load(f)
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞.", reply_markup=main_menu)
        return

    items = []
    total = 0
    for product_id in cart:
        product = next((p for p in catalog if p["id"] == product_id), None)
        if product:
            items.append(f"‚Ä¢ {product['name']} ‚Äî {product['price']} —Ä—É–±.")
            total += product["price"]

    text = "\n".join(items)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì• –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="quick_order")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")]
    ])
    await message.answer(f"üßæ <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n{text}\n\n<b>–ò—Ç–æ–≥–æ: {total} —Ä—É–±.</b>", reply_markup=kb)

# –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query(F.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_cart[user_id] = []
    await callback.message.answer("üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=main_menu)
    await callback.answer()
    await send_log_to_admin(f"üë§ {callback.from_user.full_name} –æ—á–∏—Å—Ç–∏–ª –∫–æ—Ä–∑–∏–Ω—É.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    product_id = int(callback.data.split("_")[1])
    user_cart.setdefault(user_id, []).append(product_id)
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É üõí")
    await send_log_to_admin(f"üë§ {callback.from_user.full_name} –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä ID {product_id} –≤ –∫–æ—Ä–∑–∏–Ω—É.")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.startswith("remove_"))
async def remove_from_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    product_id = int(callback.data.split("_")[1])
    if user_id in user_cart and product_id in user_cart[user_id]:
        user_cart[user_id].remove(product_id)
        await callback.answer("‚ùå –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        await send_log_to_admin(f"üë§ {callback.from_user.full_name} —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä ID {product_id} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    else:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")

# –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.callback_query(F.data == "quick_order")
async def quick_order(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not user_cart.get(user_id):
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    await send_log_to_admin(f"üë§ {callback.from_user.full_name} –Ω–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.")
    cancel_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="/catalog"), KeyboardButton(text="/cart"), KeyboardButton(text="/contacts")]
    ], resize_keyboard=True)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b> –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=cancel_kb)
    await state.set_state(Order.name)

# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
@dp.message(Order.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>—Ç–µ–ª–µ—Ñ–æ–Ω</b>:")

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π

    await state.set_state(Order.phone)

@dp.message(Order.phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>:")
    await state.set_state(Order.address)

@dp.message(Order.address)
async def get_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="pay_cash")],
        [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥", callback_data="pay_transfer")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
    await state.set_state(Order.payment)

@dp.callback_query(Order.payment)
async def payment_chosen(callback: types.CallbackQuery, state: FSMContext):
    payment_method = "–ù–∞–ª–∏—á–Ω—ã–µ" if callback.data == "pay_cash" else "–ü–µ—Ä–µ–≤–æ–¥"
    data = await state.get_data()
    user_id = callback.from_user.id
    cart_items = user_cart.get(user_id, [])

    try:
        with open("catalog.json", "r", encoding="utf-8") as f:
            catalog = json.load(f)
    except Exception:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞.")
        return

    summary = []
    total = 0
    for product_id in cart_items:
        product = next((p for p in catalog if p["id"] == product_id), None)
        if product:
            summary.append(f"‚Ä¢ {product['name']} ‚Äî {product['price']} —Ä—É–±.")
            total += product["price"]

    text = "\n".join(summary)
    username = f"@{callback.from_user.username}" if callback.from_user.username else "(–Ω–µ—Ç username)"
    order_text = (
        f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üîó Telegram: {username}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üí∞ –û–ø–ª–∞—Ç–∞: {payment_method}\n\n"
        f"üõí –ó–∞–∫–∞–∑:\n{text}\n\n"
        f"<b>–ò—Ç–æ–≥–æ: {total} —Ä—É–±.</b>"
    )

    await bot.send_message(ADMIN_ID, order_text)
    await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏. ‚úÖ", reply_markup=main_menu)
    del user_cart[user_id]
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook
    await bot.set_webhook(WEBHOOK_URL)

    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    return app

if __name__ == "__main__":
    import uvicorn
    web.run_app(main(), host="0.0.0.0", port=10000)
